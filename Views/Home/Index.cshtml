@{ViewData["Title"] = "Home Page";}

<div class="text-center">
    <h1 class="display-4">Welcome to SurveyJS Demo</h1>
    <p>This application demonstrates how to use SurveyJS in an ASP.NET MVC application.</p>
    
    <div class="mt-4">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#eventModal">Create New Event</button>
    </div>

    <div class="modal fade modal-lg" id="eventModal" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true" style="text-align: left !important;">
        <form asp-controller="Home" asp-action="Create" method="post" id="eventForm">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="eventModalLabel">Edit Event</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="resetForm()"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="id" name="id" />
                        <div class="form-group py-2">
                            <label for="title" class="form-label" style="font-weight: bold;">Title <span style="font-weight: normal;">(shown in the event bar)</span></label>
                            <input type="text" class="form-control" id="title" name="title" placeholder="Enter event title" required>
                        </div>
                        <div class="form-group py-2">
                            <label for="description" class="form-label" style="font-weight: bold;">Description <span style="font-weight: normal;">(shown in the event's Bubble/Tooltip)</span></label>
                            <textarea class="form-control" id="description" name="description" placeholder="Enter event description" required></textarea>
                        </div>
                        <div class="row py-2">
                            <div id="start_date" style="padding: 2px;"></div>
                        </div>
                        <div class="row py-2">
                            <input type="hidden" id="start" name="start" required/>
                            <input type="hidden" id="end" name="end" required/>
                        </div>
                        <div class="form-group py-2">
                            <label for="assignedTo" class="form-label" style="font-weight: bold;">Assign event to:</label>
                            <select class="form-control" id="assignedTo" name="assignedTo" placeholder="Select assignee" required>
                                <option value="">Select assignee</option>
                                <option value="John Smith">John Smith</option>
                                <option value="Jane Doe">Jane Doe</option>
                                <option value="Alex Johnson">Alex Johnson</option>
                                <option value="Team A">Team A</option>
                                <option value="Team B">Team B</option>
                            </select>
                        </div>
                    </div>
                    <div id="errorDetails" class="alert alert-danger" style="display: none;"></div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="resetForm()">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitForm()">Save</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this event?
                <input type="hidden" id="deleteId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="deleteButton" onclick="deleteEvent()">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <h2>Events</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Start Date & Time</th>
                <th>End Date & Time</th>
                <th>Assigned To</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                @foreach (var item in Model)
                {
                    <tr>
                        <td hidden data-field="id">@item.Id</td>
                        <td data-field="title">@item.Title</td>
                        <td data-field="description">@item.Description</td>
                        <td data-field="start-date">@item.StartDate.ToString("dd MMM yyyy, hh:mm tt")</td>
                        <td data-field="end-date">@item.EndDate.ToString("dd MMM yyyy, hh:mm tt")</td>
                        <td data-field="assigned-to">@item.AssignedTo</td>
                        <td>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#eventModal" onclick="openModalWithEventData(@item.Id)">Edit</button>
                            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" onclick="setDeleteId(@item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            } else {
                <tr>
                    <td colspan="6">No events found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://unpkg.com/survey-core@2.0.9/survey.core.min.js"></script>
    <script src="https://unpkg.com/survey-core@2.0.9/survey.i18n.min.js"></script>
    <script src="https://unpkg.com/survey-core@2.0.9/themes/index.min.js"></script>
    <script src="https://unpkg.com/survey-js-ui@2.0.9/survey-js-ui.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/survey-core@2.0.9/survey-core.min.css" />

    <script>
        function openModalWithEventData(id) {
        var tableData = document.querySelector("table").tBodies[0];
        var rows = tableData.querySelectorAll("tr");
        var eventRow = null;
        
        for (var i = 0; i < rows.length; i++) {
            var idCell = rows[i].querySelector("td[data-field='id']");
            if (idCell && idCell.textContent == id) {
                eventRow = rows[i];
                break;
            }
        }
        
        if (!eventRow) {
            console.error("Event row with ID " + id + " not found");
            return;
        }
        
        var titleCell = eventRow.querySelector("td[data-field='title']");
        var descriptionCell = eventRow.querySelector("td[data-field='description']");
        var startDateCell = eventRow.querySelector("td[data-field='start-date']");
        var endDateCell = eventRow.querySelector("td[data-field='end-date']");
        var assignedToCell = eventRow.querySelector("td[data-field='assigned-to']");

        $("#id").val(id);
        $("#title").val(titleCell.textContent);
        $("#description").val(descriptionCell.textContent);
        $("#assignedTo").val(assignedToCell.textContent);
        
        try {
            const startDateObj = new Date(startDateCell.textContent);
            const endDateObj = new Date(endDateCell.textContent);
            
            const formatDateForInput = (date) => {
                return date.getFullYear() + '-' + 
                    String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                    String(date.getDate()).padStart(2, '0') + 'T' + 
                    String(date.getHours()).padStart(2, '0') + ':' + 
                    String(date.getMinutes()).padStart(2, '0');
            };
            
            const survey = new Survey.Model(surveyConfig);
            survey.applyTheme(SurveyTheme.PlainLightPanelless);
            survey.setValue("start-date-time", formatDateForInput(startDateObj));
            survey.setValue("end-date-time", formatDateForInput(endDateObj));
            
            $("#start").val(formatDateForInput(startDateObj));
            $("#end").val(formatDateForInput(endDateObj));
            
            $("#start_date").Survey({ model: survey });

            survey.onValueChanged.add(function(sender, options) {
                if (options.name === "start-date-time") {                   
                    $("#start").val(options.value);
                }
            });
            
            survey.onValueChanged.add(function(sender, options) {
                if (options.name === "end-date-time") {
                    $("#end").val(options.value);
                }
            });
        } catch (error) {
            console.error("Error setting date values:", error);
        }
    }
    
    function resetForm() {
        document.getElementById("eventForm").reset();
        $("#start").val("");
        $("#end").val("");
        $("#id").val("");
    }
    
    function submitForm() {
        const id = document.getElementById("id").value;
        const title = document.getElementById("title").value;
        const description = document.getElementById("description").value;
        const assignedTo = document.getElementById("assignedTo").value;
        const start = document.getElementById("start").value;
        const end = document.getElementById("end").value;
        const startDate = new Date(start);
        const endDate = new Date(end);

        const errors = [];
        if (!title) errors.push("Please enter title.");
        else if (!description) errors.push("Please enter description.");
        else if (!start) errors.push("Please select start date and time.");
        else if (!end) errors.push("Please select end date and time.");
        else if (!assignedTo) errors.push("Please enter assigned to.");
        else if (startDate > endDate) errors.push("Please select a start and end date and time, and make sure all yards have a value.");

        if (errors.length > 0) {
            document.getElementById("errorDetails").textContent = errors.join("\n");
            document.getElementById("errorDetails").style.display = "block";
            return;
        }

        document.getElementById("eventForm").action = id ? `/Home/Edit/${id}` : "/Home/Create";
        document.getElementById("eventForm").submit();
    }

    function setDeleteId(id) {
        document.getElementById("deleteId").value = id;
    }

    function deleteEvent() {
        var id = document.getElementById("deleteId").value;
        if (id) {
            $.ajax({
                type: "POST",
                url: "/Home/Delete/" + id,
                success: function(response) {
                    window.location.href = "/Home/Index";
                }
            });
        }
    }
    </script>

    <script>
        const surveyConfig = {
            "elements": [
                {
                    "name": "start-date-time",
                    "type": "text",
                    "title": "Start Date & Time",
                    "inputType": "datetime-local",
                    "defaultValueExpression": "currentDate()",
                    "placeholder": "Select start date and time",
                    "isRequired": true,
                    "width": "50%",
                    "minWidth": "256px",
                    "padding" : "-20px",
                },
                {
                    "type": "text",
                    "name": "end-date-time",
                    "title": "End Date & Time",
                    "startWithNewLine": false,
                    "inputType": "datetime-local",
                    "defaultValueExpression": "currentDate()",
                    "placeholder": "Select end date and time",
                    "isRequired": true,
                    "width": "50%",
                    "minWidth": "256px",
                },
            ],
            "width": "100%",
            "minWidth": "256px",
            "showCompleteButton": false,
            "showNavigationButtons": false,
        }
        
        $("#eventModal").on('show.bs.modal', function (e) {
        const survey = new Survey.Model(surveyConfig);
        survey.applyTheme(SurveyTheme.PlainLightPanelless);
        
        try {
            $("#start_date").Survey({
                model: survey
            });
            
            survey.onValueChanged.add(function(sender, options) {
                if (options.name === "start-date-time") {                   
                    $("#start").val(options.value);
                }
            });
            
            survey.onValueChanged.add(function(sender, options) {
                if (options.name === "end-date-time") {
                    $("#end").val(options.value);
                }
            });
        } catch (error) {
            console.error("Error rendering survey:", error);
        }
        
        $("#eventForm").on("submit", function(event) {
            if (!$("#start").val()) {
                event.preventDefault();
                alert("Please select a start date and time");
            } else if (!$("#end").val()) {
                event.preventDefault();
                alert("Please select an end date and time");
            }
        });
    });
    </script>
}